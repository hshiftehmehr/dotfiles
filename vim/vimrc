
" vim: set tabstop=2 shiftwidth=2 expandtab:

set nocompatible
set encoding=utf-8
filetype off

let hostname = substitute(system('hostname'), '\n', '', '')
let arch = substitute(system('uname -m'), '\n', '', '')

" A bunch of vim stuff depend on more POSIX compliance than fish provides
if &shell =~# 'fish$'
  set shell=bash
endif

" -----------------------------------------------------------------------------
" Bundles
" -----------------------------------------------------------------------------
let bundle_dir = expand("~/.vim/bundle")
let vundle_dir = bundle_dir . '/Vundle.vim'
if !isdirectory(vundle_dir)
    execute ':silent !mkdir -p' bundle_dir
    execute ':silent !git clone https://github.com/VundleVim/Vundle.vim.git' vundle_dir
endif

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'wfxr/minimap.vim',

Plugin 'ctrlpvim/ctrlp.vim'

" Plugin 'scrooloose/nerdtree'
" Plugin 'Xuyuanp/nerdtree-git-plugin'

Plugin 'Yggdroot/indentLine'

Plugin 'henrik/vim-indexed-search'

Plugin 'michaeljsmith/vim-indent-object'

Plugin 'tomtom/tcomment_vim'

Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

Plugin 'tpope/vim-surround'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'dense-analysis/ale'

Plugin 'fatih/vim-go'

Plugin 'google/vim-jsonnet'

Plugin 'rust-lang/rust.vim'

Plugin 'rodjek/vim-puppet'

Plugin 'dag/vim-fish'

" Colors
Plugin 'Lokaltog/vim-distinguished'
Plugin 'nanotech/jellybeans.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" -----------------------------------------------------------------------------
" Local config
" -----------------------------------------------------------------------------
for scheme in [ 'jellybeans', 'default' ]
  try
    execute 'colorscheme '.scheme
    break
  catch
    continue
  endtry
endfor

" Further color config is here to avoid being cleared by themes
set spell
set cursorline
set hlsearch
set showmatch
set ttyfast
set ttymouse=sgr
set mouse=a
set clipboard=unnamed
set backspace=indent,eol,start
set relativenumber
set number
set colorcolumn=80
set updatetime=500 " This is for gitgutter
set foldmethod=syntax
set nofoldenable

syntax on
set background=dark
highlight clear SpellBad
highlight SpellBad cterm=underline,bold

vnoremap < <gv
vnoremap > >gv

execute ':silent !mkdir -p ~/.vim/swap-files'
set swapfile
set dir=~/.vim/swap-files

let g:airline#extensions#tabline#enabled = 1
let g:ale_completion_enabled = 1

if (&diff)
    let g:minimap_auto_start = 0
else
    let g:minimap_auto_start = 1
endif
let g:minimap_git_colors = 1
let g:minimap_highlight_search = 1

let g:gitgutter_highlight_lines = 1
highlight GitGutterAddLine ctermbg=black
highlight GitGutterChangeLine ctermbg=black
highlight GitGutterDeleteLine ctermbg=black
highlight GitGutterChangeDeleteLine ctermbg=black
highlight CursorLine ctermbg=236
highlight ColorColumn ctermbg=233
highlight Normal ctermbg=234

" Auto-reload vimrc
augroup MYVIMRC
  autocmd!
  autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc
    \ if filereadable($MYVIMRC) |
    \    source $MYVIMRC |
    \ endif |
    \ if has('gui_running') && filereadable($MYGVIMRC) |
    \    source $MYGVIMRC |
    \ endif
augroup END

" Return to last edit position when opening files
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   execute "normal! g`\"" |
  \ endif


" -----------------------------------------------------------------------------
" Common options set and possible overridden by other file types
" -----------------------------------------------------------------------------
function SetCommonOptions(indent = 4)
  let &l:colorcolumn=80
  let &l:tabstop=a:indent
  let &l:softtabstop=a:indent
  let &l:shiftwidth=a:indent
  setlocal expandtab
endfunction 

call SetCommonOptions()

" -----------------------------------------------------------------------------
" NERDTree
" -----------------------------------------------------------------------------
" Quit if NERDTree is the only open window
autocmd bufenter *
  \ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) |
  \   quit |
  \ endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter *
  \ if argc() == 0 && !exists("s:std_in") && exists(':NERDTree') |
  \   NERDTree |
  \ endif
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeGitStatusShowIgnored = 1
map <leader>t :NERDTreeToggle<CR>

" -----------------------------------------------------------------------------
" ZSH
" -----------------------------------------------------------------------------
autocmd FileType zsh call SetZSHOptions()
function! SetZSHOptions()
  call SetCommonOptions()
  let b:is_bash = 1
  let b:ale_linters = {'zsh': ['shellcheck']}
  let b:ale_fix_on_save = 1
endfunction

" -----------------------------------------------------------------------------
" JSONNET
" -----------------------------------------------------------------------------
autocmd FileType jsonnet call SetJSONNETOptions()
function! SetJSONNETOptions()
  call SetCommonOptions()
  let b:ale_fix_on_save = 1
endfunction

" -----------------------------------------------------------------------------
" Rust
" -----------------------------------------------------------------------------
autocmd FileType rust call SetRustOptions()
function! SetRustOptions()
  call SetCommonOptions()
  let b:ale_fix_on_save = 1
endfunction

" -----------------------------------------------------------------------------
" Go
" -----------------------------------------------------------------------------
" let g:go_autodetect_gopath = 1
" let $GOBIN = $HOME . '/opt/arch/' . arch . '/golang/bin'
autocmd FileType go call SetGoOptions()
function! SetGoOptions()
  call SetCommonOptions()
  let b:ale_fix_on_save = 1
  let b:ale_linters = {'go': ['golangci-lint']}
  let b:ale_go_golangci_lint_options=""
endfunction

" -----------------------------------------------------------------------------
" YAML
" -----------------------------------------------------------------------------
autocmd FileType yaml call SetYAMLOptions()
function! SetYAMLOptions()
  call SetCommonOptions(2)
  " let b:ale_fixers = {'yaml': ['prettier']}
  let b:ale_fix_on_save = 1
  let b:ale_yaml_yamllint_options="--config-data '
    \ {
    \   extends: default,
    \   rules: {
    \     line-length: {
    \       max: 120,
    \       level: warning
    \     }
    \   }
    \ }
    \'"
endfunction

" -----------------------------------------------------------------------------
" JSONNET
" -----------------------------------------------------------------------------
autocmd FileType jsonnet call SetJSONNETOptions()
function! SetJSONNETOptions()
  call SetCommonOptions(2)
  let b:ale_fix_on_save = 1
endfunction

" -----------------------------------------------------------------------------
" JSON
" -----------------------------------------------------------------------------
autocmd FileType json call SetJSONOptions()
function! SetJSONOptions()
  call SetCommonOptions(2)
  let b:ale_fix_on_save = 1
endfunction

" -----------------------------------------------------------------------------
" Markdown
" -----------------------------------------------------------------------------
autocmd FileType markdown call SetMarkdownOptions()
function! SetMarkdownOptions()
  call SetCommonOptions()
  let b:ale_fix_on_save = 1
endfunction

" -----------------------------------------------------------------------------
" Puppet
" -----------------------------------------------------------------------------
autocmd FileType puppet call SetPuppetOptions()
function! SetPuppetOptions()
  call SetCommonOptions(2)
endfunction

" -----------------------------------------------------------------------------
" CPP
" -----------------------------------------------------------------------------
autocmd FileType cpp call SetCPPOptions()
function! SetCPPOptions()
  call SetCommonOptions()
  setlocal colorcolumn=80
  ClangFormatAutoEnable
endfunction

" -----------------------------------------------------------------------------
" Python
" -----------------------------------------------------------------------------
autocmd FileType python call SetPythonOptions()
function! SetPythonOptions()
  call SetCommonOptions()
  let b:ale_fix_on_save = 1
  " setlocal formatoptions-=t

  " pip install flake8 flake8-import-order flake8-import-style \
  "     flake8-logging-format flake8-mock flake8-quotes pylint autopep8 yapf
  " let b:ale_python_flake8_options="
  "   \ --enable-extensions=G --max-line-length=120 --inline-quotes=double"
  " let b:ale_python_pylint_options="
  "   \ --max-line-length=120"
endfunction
